diff -ur vasp_5.4.4_source_original/src/constr_cell_relax.F vasp_5.4.4_fc/src/constr_cell_relax.F
--- vasp_5.4.4_source_original/src/constr_cell_relax.F	2022-06-09 14:51:15.148229000 -0500
+++ vasp_5.4.4_fc/src/constr_cell_relax.F	2023-05-31 13:06:02.251928000 -0500
@@ -24,9 +24,10 @@
 !
 !-----------------------------------------------------------------------
 
-      SUBROUTINE CONSTR_CELL_RELAX(FCELL)
+      SUBROUTINE CONSTR_CELL_RELAX(FCELL,LFIX_XY,LFIX_Z)
       USE prec
       REAL(q) FCELL(3,3)
+      LOGICAL LFIX_XY,LFIX_Z
 
 !     just one simple example
 !     relaxation in x directions only
@@ -38,7 +39,24 @@
 !      FCELL=0   ! F90 style: set the whole array to zero
 !      FCELL(3,3)=SAVE
 
-      
+      !SJ edit
+      IF(LFIX_XY) THEN
+            !     relaxation in z directions only (for independent z)
+            SAVE=FCELL(3,3)
+            FCELL=0   
+            FCELL(3,3)=SAVE
+      ENDIF
+
+      !SJ edit
+      IF(LFIX_Z) THEN
+            !     relaxation in x,y directions only (for independent z)
+            FCELL(3,1)=0
+            FCELL(3,2)=0
+            FCELL(3,3)=0
+            FCELL(2,3)=0
+            FCELL(1,3)=0
+      ENDIF
+
       RETURN
       END SUBROUTINE
 
diff -ur vasp_5.4.4_source_original/src/dyna.F vasp_5.4.4_fc/src/dyna.F
--- vasp_5.4.4_source_original/src/dyna.F	2021-12-03 10:49:14.549760000 -0600
+++ vasp_5.4.4_fc/src/dyna.F	2023-05-31 13:18:10.095126000 -0500
@@ -1227,9 +1227,8 @@
       TYPE (type_info)   T_INFO
       REAL(q)  TIFOR(3,T_INFO%NIONS),VEL(3,T_INFO%NIONS)
 ! local
-      INTEGER NI,M
-      REAL(q) VTMP(3)
-
+      INTEGER NI,M,NI_LOOP
+      REAL(q) VTMP(3,T_INFO%NIONS)
 
       IF (T_INFO%LSDYN) THEN
 !-----Selective dynamics here ... :
@@ -1241,21 +1240,73 @@
 !-----and reset the selected force coordinates (warning: forces are
 !     given in cartesian, selection is made in direct coordinates!):
             DO M=1,3
-              VTMP(M)=TIFOR(M,NI)
+               VTMP(M,NI)=TIFOR(M,NI) !VTMP is initialized
             ENDDO
-            CALL KARDIR(1,VTMP,LATT_CUR%B)
-            DO M=1,3
-              IF (.NOT.T_INFO%LSFOR(M,NI)) VTMP(M)=0._q
+         ENDDO
+
+         CALL KARDIR(T_INFO%NIONS,VTMP,LATT_CUR%B)
+         
+         DO NI=1,T_INFO%NIONS
+            DO M=1,3 !for all
+               IF (.NOT.T_INFO%LSFOR(M,NI)) VTMP(M,NI)=0._q
             ENDDO
-            CALL DIRKAR(1,VTMP,LATT_CUR%A)
+         ENDDO
+
+         CALL DIRKAR(T_INFO%NIONS,VTMP,LATT_CUR%A)
+         
+         DO NI=1,T_INFO%NIONS
             DO M=1,3
-              TIFOR(M,NI)=VTMP(M)
+               TIFOR(M,NI)=VTMP(M,NI) !return forces
             ENDDO
          ENDDO
       ENDIF
       END SUBROUTINE
 
 
+      !SJ: Subroutine-force correction
+      SUBROUTINE CORRECT_FORCES(IU0,T_INFO,VEL,TIFOR,LATT_CUR)
+      USE lattice
+      USE poscar
+      IMPLICIT NONE
+
+      INTEGER IU0
+      TYPE (latt)        LATT_CUR
+      TYPE (type_info)   T_INFO
+      REAL(q)  TIFOR(3,T_INFO%NIONS),VEL(3,T_INFO%NIONS)
+! local
+      INTEGER NI,M,NI_LOOP
+      REAL(q) VTMP(3,T_INFO%NIONS)
+
+  
+      DO NI=1,T_INFO%NIONS !from 1st ion to last ion
+!-----reset the selected force coordinates (warning: forces are
+!     given in cartesian, selection is made in direct coordinates!):
+         DO M=1,3
+            VTMP(M,NI)=TIFOR(M,NI) !VTMP is initialized
+         ENDDO
+      ENDDO
+
+      IF (IU0>1) WRITE(IU0,*)'CARTESIAN F:', VTMP
+
+      DO NI=1,T_INFO%NIONS
+         VTMP(1,NI) = VTMP(1,NI) - T_INFO%FORCES_X(NI)*T_INFO%SCALING     !Restoring force
+         VTMP(2,NI) = VTMP(2,NI) - T_INFO%FORCES_Y(NI)*T_INFO%SCALING     !Restoring force
+         VTMP(3,NI) = VTMP(3,NI) - T_INFO%FORCES_Z(NI)*T_INFO%SCALING     !Restoring force
+      ENDDO
+
+      IF (IU0>1) WRITE(IU0,*)'CORRECTED F:', VTMP
+
+      DO NI=1,T_INFO%NIONS
+         DO M=1,3
+            TIFOR(M,NI)=VTMP(M,NI) !return forces
+         ENDDO
+      ENDDO
+
+      END SUBROUTINE
+
+
+
+
       SUBROUTINE SET_SELECTED_VEL_ZERO(T_INFO,VEL,LATT_CUR)
       USE lattice
       USE poscar
diff -ur vasp_5.4.4_source_original/src/main.F vasp_5.4.4_fc/src/main.F
--- vasp_5.4.4_source_original/src/main.F	2021-12-03 10:49:16.718439000 -0600
+++ vasp_5.4.4_fc/src/main.F	2023-05-31 13:19:21.303683000 -0500
@@ -527,6 +527,11 @@
          WRITE(TIU6,130)
          WRITE(TIU6,*)'INCAR:'
       ENDIF
+
+!SJ edit
+!Allocate Forces and scaling parameter
+      ALLOCATE(T_INFO%FORCES_X(NIOND),T_INFO%FORCES_Y(NIOND),T_INFO%FORCES_Z(NIOND))
+
 !  first scan of POTCAR to get LDIM, LMDIM, LDIM2 ...
       LDIM =16
       LDIM2=(LDIM*(LDIM+1))/2
@@ -549,6 +554,8 @@
 ! read INCAR
 !-----------------------------------------------------------------------
       CALL XML_TAG("incar")
+      
+      !SJ
 
       CALL READER( &
           IO%IU5,IO%IU0,IO%INTERACTIVE,INFO%SZNAM1,INFO%ISTART,INFO%IALGO,MIX%IMIX,MIX%MAXMIX,MIX%MREMOVE, &
@@ -572,10 +579,15 @@
           WDES%LSPIRAL,WDES%LZEROZ,WDES%QSPIRAL,WDES%LORBITALREAL, &
           INFO%LASPH,INFO%TURBO,INFO%IRESTART,INFO%NREBOOT,INFO%NMIN,INFO%EREF, &
           INFO%NLSPLINE,ISPECIAL,MDALGO &
+         ,T_INFO%LFIX_XY,T_INFO%LFIX_Z,T_INFO%FORCES_X,T_INFO%FORCES_Y,T_INFO%FORCES_Z,T_INFO%SCALING & !SJ
 #ifdef libbeef
          ,LBEEFENS,LBEEFBAS &
 #endif
          )
+      
+      !SJ
+
+      
 #ifdef tbdyn
       SEED=0
       !c user provided SEED for random number generator
@@ -2743,6 +2755,14 @@
 
       IF (IO%IU0>=0) WRITE(TIU0,*)'entering main loop'
 
+      !SJ: log input
+      IF (IO%IU0>1) WRITE(TIU0,*)'fix xy:',T_INFO%LFIX_XY
+      IF (IO%IU0>1) WRITE(TIU0,*)'fix z:',T_INFO%LFIX_Z
+      IF (IO%IU0>1) WRITE(TIU0,*)'forces x:',T_INFO%FORCES_X
+      IF (IO%IU0>1) WRITE(TIU0,*)'forces y:',T_INFO%FORCES_Y
+      IF (IO%IU0>1) WRITE(TIU0,*)'forces z:',T_INFO%FORCES_Z
+      IF (IO%IU0>1) WRITE(TIU0,*)'scaling:',T_INFO%SCALING
+
       NSTEP = 0
       CALL START_TIMING("LOOP+")
 
@@ -3151,7 +3171,10 @@
 
       IF (DYN%IBRION /=5 .AND. DYN%IBRION /=6 .AND. DYN%IBRION /=7 ) &
       CALL SET_SELECTED_FORCES_ZERO(T_INFO,DYN%VEL,TIFOR,LATT_CUR)
-  
+      
+      !SJ: force correction
+      CALL CORRECT_FORCES(IO%IU0,T_INFO,DYN%VEL,TIFOR,LATT_CUR)
+
       EKIN=0
       EKIN_LAT=0
       TEIN=0
@@ -3556,7 +3579,7 @@
            ENDDO
         ENDIF
 
-        CALL CONSTR_CELL_RELAX(D2SIF)
+        CALL CONSTR_CELL_RELAX(D2SIF,T_INFO%LFIX_XY,T_INFO%LFIX_Z)
 
         IF (FACTSI/=0) THEN
            DO I=1,3
diff -ur vasp_5.4.4_source_original/src/poscar.F vasp_5.4.4_fc/src/poscar.F
--- vasp_5.4.4_source_original/src/poscar.F	2021-12-03 10:49:17.478517000 -0600
+++ vasp_5.4.4_fc/src/poscar.F	2023-05-31 13:04:13.609024000 -0500
@@ -33,6 +33,13 @@
         REAL(q), POINTER :: ZCT(:)    ! "charge transfer" charges for non-scf calculations
         REAL(q), POINTER :: RGAUS(:)  ! widths for Gaussian CT charge distributions
         CHARACTER (LEN=2), POINTER :: TYPE(:)  ! type information for each ion
+        LOGICAL LFIX_XY                ! SJ: fix lattice constant x and y
+        LOGICAL LFIX_Z                 ! SJ: fix lattice constant z
+        REAL(q), POINTER :: FORCES_X(:) ! SJ: Born effective charges of each atom
+        REAL(q), POINTER :: FORCES_Y(:) ! SJ: Born effective charges of each atom
+        REAL(q), POINTER :: FORCES_Z(:) ! SJ: Born effective charges of each atom
+        REAL(q) SCALING               ! SJ: scaling parameter to force correction
+        
       END TYPE
 
 
diff -ur vasp_5.4.4_source_original/src/reader.F vasp_5.4.4_fc/src/reader.F
--- vasp_5.4.4_source_original/src/reader.F	2021-12-03 10:49:17.563174000 -0600
+++ vasp_5.4.4_fc/src/reader.F	2023-05-31 13:21:43.551317000 -0500
@@ -20,6 +20,7 @@
      &        LSPIRAL,LZEROZ,QSPIRAL,LORBITALREAL, &
      &        LASPH,TURBO,IRESTART,NREBOOT,NMIN,EREF, &
      &        NLSPLINE,ISPECIAL,MDALGO &
+     &       ,LFIX_XY,LFIX_Z,FORCES_X,FORCES_Y,FORCES_Z,SCALING &  !SJ
 #ifdef libbeef
      &       ,LBEEFENS,LBEEFBAS &
 #endif
@@ -55,10 +56,12 @@
      &          LNONCOLLINEAR,LSORBIT,LMETAGGA, &
      &          LBEEFENS,LBEEFBAS, &
      &          LPLANE_WISE, &
-     &          LASPH,INTERACTIVE,LORBITALREAL,LVCADER
+     &          LASPH,INTERACTIVE,LORBITALREAL,LVCADER &
+     &         ,LFIX_XY,LFIX_Z !SJ edit
       DIMENSION POMASS(NTYPD),RWIGS(NTYPP), &
      &          ROPT(NTYPD),DARWIN_V(NTYPD),DARWIN_R(NTYPD),VCA(NTYPD)
-      DIMENSION ATOMOM(*)
+      DIMENSION ATOMOM(*),FORCES_X(NIONS),FORCES_Y(NIONS),FORCES_Z(NIONS) !SJ edit
+      REAL(q)   SCALING
       REAL(q)   SAXIS(3)
       REAL(q)   NELECT,NUP_DOWN
       REAL(q)   STM(7)
@@ -1052,6 +1055,67 @@
       ENDIF
       CALL XML_INCAR_V('MAGMOM','F',IDUM,ATOMOM,CDUM,LDUM,CHARAC,N)
 
+! SJ: FIX: FIX lattice constant
+
+      LFIX_XY=.FALSE.
+      CALL RDATAB(LOPEN,INCAR,IU5,'LFIX_XY','=','#',';','L', &
+     &            IDUM,RDUM,CDUM,LFIX_XY,CHARAC,N,1,IERR)
+
+      LFIX_Z=.FALSE.
+      CALL RDATAB(LOPEN,INCAR,IU5,'LFIX_Z','=','#',';','L', &
+     &            IDUM,RDUM,CDUM,LFIX_Z,CHARAC,N,1,IERR)
+
+! SJ: FORCES: Born effective charges of each atom
+
+      DO NI=1,NIONS
+            FORCES_X(NI)=0
+      ENDDO
+      CALL RDATAB(LOPEN,INCAR,IU5,'FORCES_X','=','#',';','F', &
+     &            IDUM,FORCES_X,CDUM,LDUM,CHARAC,N,NIONS,IERR)
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+     &                    ((IERR==0).AND.(N<NIONS))) THEN
+         IF (IU0>=0) &
+         WRITE(IU0,*)'Error reading item ''FORCES_X'' from file INCAR.'
+         GOTO 150
+      ENDIF
+      
+      DO NI=1,NIONS
+            FORCES_Y(NI)=0
+      ENDDO
+      CALL RDATAB(LOPEN,INCAR,IU5,'FORCES_Y','=','#',';','F', &
+     &            IDUM,FORCES_Y,CDUM,LDUM,CHARAC,N,NIONS,IERR)
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+     &                    ((IERR==0).AND.(N<NIONS))) THEN
+         IF (IU0>=0) &
+         WRITE(IU0,*)'Error reading item ''FORCES_Y'' from file INCAR.'
+         GOTO 150
+      ENDIF
+
+      DO NI=1,NIONS
+            FORCES_Z(NI)=0
+      ENDDO
+      CALL RDATAB(LOPEN,INCAR,IU5,'FORCES_Z','=','#',';','F', &
+     &            IDUM,FORCES_Z,CDUM,LDUM,CHARAC,N,NIONS,IERR)
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+     &                    ((IERR==0).AND.(N<NIONS))) THEN
+         IF (IU0>=0) &
+         WRITE(IU0,*)'Error reading item ''FORCES_Z'' from file INCAR.'
+         GOTO 150
+      ENDIF
+
+! SJ: SCALING: Scaling parameter to force correction
+
+      SCALING=0._q
+      CALL RDATAB(LOPEN,INCAR,IU5,'SCALING','=','#',';','F', &
+     &            IDUM,SCALING,CDUM,LDUM,CHARAC,N,1,IERR)
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+     &                    ((IERR==0).AND.(N<1))) THEN
+         IF (IU0>=0) &
+         WRITE(IU0,*)'Error reading item ''SCALING'' from file INCAR.'
+         GOTO 150
+      ENDIF
+
+
 ! number of electrons ..., default is NELECT=0 (= neutral cell)
       NELECT=0._q
       CALL RDATAB(LOPEN,INCAR,IU5,'NELECT','=','#',';','F', &
